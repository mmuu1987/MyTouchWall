// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel GetPos


#include "UnityCG.cginc"

struct Data
{
  float2 pos;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> Dst;

RWTexture2D<half2> Velocity;

RWStructuredBuffer<Data> PosBuff;

float2 screenPos;

float4 pos;




//numthreads(1,1,1)里面的三个参数和  c#那边 ComputeShader.Dispatch(int kernelIndex, int threadGroupsX, int threadGroupsY, int threadGroupsZ);理解透了，就明白其中的运作机制了
//三句代码搞定缩放，简直优雅漂亮
[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
  float dis = distance(id.xy,pos.xy);

  //if(id.y>100)
  //{
    //	Dst[id.xy]= float4(1,0,0,1);
  //}
  //else
  //{
    //	Dst[id.xy]= float4(1,1,1,1);
  //}

  if(dis<pos.z)
  {
    Dst[id.xy]= float4(1,0,0,1);
  }
  else
  {
    Dst[id.xy]= float4(0,0,0,1);
  }

  
}
[numthreads(1,1,1)]
void GetPos(uint3 id : SV_DispatchThreadID)
{
  if(screenPos.x==id.x && screenPos.y==id.y)
  {
    //PosBuff[0].pos = Velocity[id.xy].xy;
    PosBuff[0].pos = _ScreenParams.xy;
  }
}
